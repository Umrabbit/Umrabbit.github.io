{"meta":{"title":"草莓葱丁的小屋","subtitle":"个人博客","description":"","author":"Umrabbit","url":"https://umrabbit.github.io","root":"/"},"pages":[{"title":"关于本人","date":"2022-11-17T06:02:15.000Z","updated":"2022-12-08T03:21:12.247Z","comments":true,"path":"about.html","permalink":"https://umrabbit.github.io/about.html","excerpt":"","text":"这是一个测试 ¶这是一个测试 ¶这是一个测试 这是一个测试 这是一个测试 这是一个测试 这是一个测试 测试 test hexo g hexo s hexo clean hexo d"},{"title":"links","date":"2022-11-17T07:18:39.000Z","updated":"2022-11-17T07:38:35.909Z","comments":true,"path":"PY.html","permalink":"https://umrabbit.github.io/PY.html","excerpt":"","text":""},{"title":"文章归档","date":"2022-11-17T07:16:02.691Z","updated":"2022-11-17T07:16:02.691Z","comments":true,"path":"archive.html","permalink":"https://umrabbit.github.io/archive.html","excerpt":"","text":""},{"title":"标签","date":"2022-11-16T13:28:19.000Z","updated":"2022-11-17T08:32:42.753Z","comments":true,"path":"tags.html","permalink":"https://umrabbit.github.io/tags.html","excerpt":"","text":""}],"posts":[{"title":"DiffusionModel扩散模型","slug":"DiffusionModel","date":"2022-12-09T05:34:15.000Z","updated":"2022-12-10T07:08:30.690Z","comments":true,"path":"2022/12/09/DiffusionModel/","link":"","permalink":"https://umrabbit.github.io/2022/12/09/DiffusionModel/","excerpt":"","text":"Diffusion Model 扩散模型 参考视频：强推！不愧是公认的讲的最好的【Diffusion模型全套教程】同济大佬3小时带你从入门到进阶（深度学习/神经网络/GAN/Diffusion模型）_哔哩哔哩_bilibili markdown中公式书写：如何在简书Markdown中输入数学公式 - 简书 (jianshu.com)、Markdown常用数学公式_nanyidev的博客-CSDN博客_markdown 数学公式 ¶❤️‍🔥 前置：正态分布 ¶1、基本概念 服从正态分布可表示为： $$ Z\\sim N(0,1) $$ 其中，μ=0，σ=1 具体参数及含义如下表： 参数 含义 μ 均值；期望 σ 标准差 $σ^2$ 方差 方差公式： 标准差^2 其含义为与均值的距离的均值。由于减去（距离的均值）结果有正有负，所以添上平方 式子🍒可以翻译成式子🍏，即对（数字xi减去均值x拔的平方）求均值 $$ 🍒σ^2=E[(X-E(x))^2]🍒 $$ 方差公式也可写为： $$ 🍏σ^2=\\frac{\\sum_{i=1}^{n}(x_i-\\overline{x})^2}{n}🍏 $$ 从该式子中可以进行的解读是：方差=（数据与均值之间）平均距离 ¶2、图像表示 正态分布图像：方差越小，数据越集中；方差越大，数据越分散 ¶3、运算法则 ➕加法➕：①如果两个相互独立的正态分布X~N(u1,m)，Y~N(u2,n)，那么Z=X±Y仍然服从正态分布： $$ Z\\sim N(u1±u2,m+n) $$ ➕加法➕：②正态分布加一个常数,还是符合正态分布,只是期望值加上了这个常数： $$ N(0,σ²)+C \\sim N(C,σ²) $$ ❌乘法❌：在标准正态分布前乘以一个常数后，服从如下分布： $$ aX\\sim N(0,a^2) $$ ¶🎣 流程概述 扩散模型建模整体分为两个步骤： 前向加噪。一共n个时刻，每个时刻都向图像中添加噪声，噪声满足标准的正态分布。噪声本质上就是标签。 后向去噪。知道了怎么加噪声就知道怎么还原图像。 ¶🪀 前向加噪 从X0时刻开始，依次向图像中添加噪声。而每个时刻加的噪声量是不一样的，因为我们希望每个时刻加了噪声之后，图像的扩散幅度是一样。前面时刻的图像加一点点肉眼就能看出扩散幅度，后面时刻的图像中噪声分布得已经极没有规律了，如果还加一点点噪声，那就完全没有效果，看不出扩散幅度了。所以往后，加的噪声是越来越多的。即，越往后噪声的影响越大，上一时刻的状态影响越小。 假设β是每幅图像噪声加成的权重项，β值在0.0001-0.002范围内自己调，我们令： $$ α_t=1-β_t $$ 某一时刻的分布Xt计算公式如下所示： $$ 🍓X_t=\\sqrt{α_t}x_{t-1}+\\sqrt{1-α_t}z_1 🍓 $$ 某一时刻的分布=权重1*上一时刻的分布+权重2*新输入的噪声。越往后噪声的权重越大，上一时刻的分布的权重越小。已知X0，要想求出Xt时刻的分布，得通过递归的方式，先求Xt-1再求Xt-2以此类推，很像RNN，只能串行，效率低 （这也是RNN后来被Transformer取代的原因之一）。所以我们期望，通过X0，不考虑中间其他时刻噪声的分布，而直接求出Xt。 🦖推导过程： 先求出Xt-1的分布瞅瞅： $$ X_{t-1}=\\sqrt{α_{t-1}}x_{t-2}+\\sqrt{1-α_{t-1}}z_2 $$ Xt-1代入🍓式中得🎃：（其中z1z2都满足标准的正态分布） $$ 🎃X_t=\\sqrt{α_tα_{t-1}}x_{t-2}+\\sqrt{α_t(1-α_{t-1})}z_2+\\sqrt{1-α_t}z_1🎃 $$ 由于z1、z2均为服从(0,1)的正态分布，两者前面乘上一个常数后服从的分布为： $$ \\sqrt{1-α_t}z_1\\sim N(0,1-α_t) $$ $$ \\sqrt{α_t(1-α_{t-1})}z_2\\sim N(0,α_t(1-α_{t-1})) $$ 两者相加后服从的正态分布为： $$ \\sqrt{1-α_t}z_1+\\sqrt{α_t(1-α_{t-1})}\\sim N(0,1-α_tα_{t-1}) $$ 还原到式子🎃中得（其中z2拔表示为一个标准正态分布，所以等同于z1）： $$ X_t=\\sqrt{α_tα_{t-1}}x_{t-2}+\\sqrt{1-α_tα_{t-1}}\\overline{z}_2 $$ 观察该式与🍓式子： $$ 🍓X_t=\\sqrt{α_t}x_{t-1}+\\sqrt{1-α_t}z_1 🍓 $$ 发现想求xt-2时，仅在根号下跟着αt后面跟着乘一个αt-1即可。由此推出： $$ 🐨X_t=\\sqrt{\\overline{α}_t}x_0+\\sqrt{1-{\\overline{α}_t}}{z_{t}}🐨 $$ 其中α拔为α的累乘，zt为标准正态分布，x0为原始图像分布，任意时刻的XT可以由此式求出 ¶🎐 反向去噪 目标：希望通过知道Xt的分布反向推导出X0，但直接推出来是不现实的。所以我们慢慢通过推导Xt-1、Xt-2如此迭代下来到X0 首先努力通过已知Xt的分布（后一时刻）反向推导出Xt-1的分布（前一时刻）。我们使用到贝叶斯公式进行转换。 贝叶斯公式：已知由A分布求出的B分布，可以逆转，由Xt-1分布倒推出Xt分布 $$ P(A|B)=P(B|A)\\frac{P(A)}{P(B)} $$ 运用到这里来就是：已知由Xt分布求出的Xt-1分布，可以逆转，由Xt-1分布倒推出Xt分布 $$ q(X_{t-1}|X_t,X_0)=q(X_t|X_{t-1},X_0)\\frac{q(X_{t-1}|X_0)}{q(X_t|X_0)} $$ 式中添加上X0是因为后面的Xt-1和Xt的分布都需要根据X0求出 对每一项分布进行拆解： $$ q(X_t|X_{t-1},X_0):🍓X_t=\\sqrt{α_t}x_{t-1}+\\sqrt{1-α_t}z 🍓\\sim N(\\sqrt{α_t}x_{t-1},1-α_t) $$ $$ {q(X_{t-1}|X_0)}:🐨X_{t-1}=\\sqrt{\\overline{α}_{t-1}}x_0+\\sqrt{1-{\\overline{α}_{t-1}}}{z}🐨\\sim N(\\sqrt{\\overline{α}_{t-1}}x_0,1-{\\overline{α}_{t-1}}) $$ $$ {q(X_t|X_0)}:🐨X_t=\\sqrt{\\overline{α}_t}x_0+\\sqrt{1-{\\overline{α}_t}}{z}🐨\\sim N(\\sqrt{\\overline{α}_t}x_0,1-{\\overline{α}_t}) $$ 正态分布N(μ,σ2)的公式如下所示： 将以上正态分布代入到公式后化简，整理成以下形式再一一对应，就可以得到σ2(是个常数) 已知σ2的值后，按照下面蓝框的形式，给上面蓝框乘上σ2再除以2，就可以得到期望μ的值，解出μ如下： X0可以通过🐨式子推导出来： $$ 🐨X_t=\\sqrt{\\overline{α}_t}x_0+\\sqrt{1-{\\overline{α}_t}}{z_{t}}🐨 $$ $$ X_0=\\frac{1}{\\sqrt{\\overline{a}_t}}(X_t-\\sqrt{1-{\\overline{a}_t}}z_t) $$ 带入式中得μ： $$ \\tilde{μ}_t=\\frac{1}{\\sqrt{a_t}}(x_t-\\frac{β_t}{\\sqrt{1-\\overline{a}_t}})z_t $$ 但此时，我们唯一不知道的量就是zt，即每个时刻加入的噪声 ¶🦔 噪声建模 科学家们无法通过数学公式去推导出噪声，只能让机器利用深度学习去猜，利用模型去预测$z_t$，我们的前向过程中，向图像中加入的每一步噪声，都是我们自己通过采样得到的已知值，通过该已知值去拟合我们未知的$z_t$ 原始论文中是使用Unet这样的模型进行预测。每一时刻都需要Unet去推测前一时刻的$z_t$，由于输入不同，每个Unet也是不同的 ¶🍧算法流程图 ¶训练 $X_0\\sim q(X_0) \\quad$ 对数据集进行采样，即取数据 $t\\sim Uniform({1,…,T}) \\quad$ 构建一个t属于的序列，我们需要给每个batch扩散随机的次数，以防机器学到规律 $\\varepsilon\\sim N(0,I) \\quad$ 噪声严格符合标准正态分布 $\\nabla_{\\theta} \\lvert\\lvert\\varepsilon-\\varepsilon_\\theta(\\sqrt{\\overline{α}_t}x_0+\\sqrt{1-{\\overline{α}_t}}{\\varepsilon})\\lvert\\lvert^2 \\quad$ 整个式子表示梯度下降更新$\\theta$权重参数。其中，$\\varepsilon_\\theta$为训练噪声的模型，模型中第一个参数是$X_t$时刻的图像，模型中第二个参数是告诉模型处于哪到哪第几幅图噪声的传播 ¶采样 $X_t\\sim N(0,I) \\quad$$X_t$为在标准正态分布中随机采样的一个数值 $t=T,…,1 \\quad$for循环 最后一步不加噪音点 $X_{t-1}$后面的公式就是利用之前求出的均值和方差进行计算的。我们通过此公式持续训练$X_{t-1}$、$X_{t-2}$，结果不断往前传，直到训练出$X_0$ ¶🫖示例代码","categories":[{"name":"人工智能","slug":"人工智能","permalink":"https://umrabbit.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"}],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://umrabbit.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"text to image","slug":"text-to-image","permalink":"https://umrabbit.github.io/tags/text-to-image/"},{"name":"数学","slug":"数学","permalink":"https://umrabbit.github.io/tags/%E6%95%B0%E5%AD%A6/"}]},{"title":"UE数学结点详解-PartⅠ","slug":"UE-math1","date":"2022-12-05T07:24:15.000Z","updated":"2022-12-08T03:21:14.990Z","comments":true,"path":"2022/12/05/UE-math1/","link":"","permalink":"https://umrabbit.github.io/2022/12/05/UE-math1/","excerpt":"","text":"[TOC] 💭前言：这一系列文章主要是研究官方示例中Math地图中的各函数功能及用处 🎪版本：基于的引擎版本为4.26 ¶一、ABS绝对值函数 ¶1、函数功能 本次介绍的函数为：ABS绝对值函数，其作用在于将y&lt;0的部分，沿着x轴对称翻上来。 其函数图像如下所示： ¶2、使用示例 ⌛官方给出的是一个沿世界坐标z轴上下跳跃的小球，其材质连线如图所示： 该节点较为简单，上方以Time输入到Sine函数中去，通过Abs绝对值函数将y轴下方图像翻上来，连接到线性插值Lerp的Alpha节点上，用于控制(0,0,-100)~(0,0,0)之间的插值程度，即小球的跳跃高度。最终将结果连接到WorldPositionOffset(世界位置偏移)上去。 上方结点最终形成的图像大致如下所示： ¶二、Frac取小数函数 ¶1、函数功能 本次介绍的函数为：Frac取小数函数，其作用在于去除任意数字的整数部分，保留小数。 例如，输入(1.0,2.0)输出(0.0,1.0)之间的连续的小数 其函数图像如下所示： ¶2、使用示例 ⌛官方给出的实例是，一个物体的明暗颜色随着时间交替变化，其材质连线如图所示： 该节点较为简单，对输入的Time使用Frac函数，连接到BaseColor上去控制按钮颜色。","categories":[{"name":"UE","slug":"UE","permalink":"https://umrabbit.github.io/categories/UE/"}],"tags":[{"name":"数学","slug":"数学","permalink":"https://umrabbit.github.io/tags/%E6%95%B0%E5%AD%A6/"},{"name":"结点详解","slug":"结点详解","permalink":"https://umrabbit.github.io/tags/%E7%BB%93%E7%82%B9%E8%AF%A6%E8%A7%A3/"}]},{"title":"Electron+Vue+ElementUI+Iconify项目使用指南","slug":"electron-vue-document","date":"2022-11-24T01:26:13.000Z","updated":"2022-11-24T03:27:50.137Z","comments":true,"path":"2022/11/24/electron-vue-document/","link":"","permalink":"https://umrabbit.github.io/2022/11/24/electron-vue-document/","excerpt":"","text":"¶前言 ⚓该文档是写个小白师弟看的，放在博客里存个档~ ¶一、运行方法 首先在VSCode中拉取最新项目（源代码管理&gt;拉取） 打开终端，使用npm install指令，安装项目所需要的依赖包 在终端中使用npm run electron:serve 指令，运行项目即可 ¶二、目录结构及功能 ¶1、概述 项目整体目录结构如下图所示： 主要文件功能说明如下： dist_electron：存放electron打包后的文件 public：存放公共资源 ⭐src：存放主要代码文件 .eslintrc.js：设置语法规则 package.json：规定项目需要的依赖包版本 ¶2、重点目录说明 上述目录中，src文件夹最为重要，主要界面都存放在其中，其结构如下图所示： 主要文件功能说明如下： ⭐components：存放构成该项目的各个页面组件 login：存放登录界面 router：存放路由相关文件，其中index.js设置了各界面之间的跳转路径 App.vue：整个项目的根界面，其他所有界面都是以组件的形式插入进去 background.js：控制electron的主进程，可以控制各窗口的状态 index.js：主界面的入口文件，涉及全局引入部件、注册挂载根节点等 login.js：登陆界面的入口文件 ¶三、其他 ¶1、组件 本项目中使用的组件库为ElementUI和iView，已在整体引用，在项目中直接使用即可 具体使用方法请参考其官方文档： Element - 网站快速成型工具 iView - A high quality UI Toolkit based on Vue.js (talkingdata.com) ¶2、图标 本项目中使用的图标库为iconify 文件存放在src&gt;components&gt;Icons文件夹中，使用方法和组件一样","categories":[{"name":"前端","slug":"前端","permalink":"https://umrabbit.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Electron","slug":"Electron","permalink":"https://umrabbit.github.io/tags/Electron/"},{"name":"Vue","slug":"Vue","permalink":"https://umrabbit.github.io/tags/Vue/"}]},{"title":"构建Electron+Vue项目记录","slug":"ElectronVueRecord","date":"2022-11-19T07:47:18.000Z","updated":"2022-12-06T13:06:09.772Z","comments":true,"path":"2022/11/19/ElectronVueRecord/","link":"","permalink":"https://umrabbit.github.io/2022/11/19/ElectronVueRecord/","excerpt":"","text":"¶一、搭建项目 ¶1、使用vue-cli搭建项目 npm uninstall vue-cli -g 先卸载已有的vue2.x脚手架，因为其无法使用vue create创建项目 npm install vue-cli -g 全局安装vue-cli5.x脚手架 ¶2、使用vue create创建项目 在控制台输入vue create + 你的项目名 vue create desktop_test 选择需要的vue版本(2/3)即可 ¶3、使用electron-builder安装Electron vue add electron-builder 选择安装版本后，继续安装就报错了 此时要将electron下载地址指向taobao镜像： npm config set electron_mirror &quot;https://npm.taobao.org/mirrors/electron/&quot; 再次安装 使用指令启动electron（如果此时报错找不到electron模块，npm install 一下即可） yarn run electron:serve ¶二、引入组件 想要引入IView组件 首先使用指令安装ivew npm install iview --save 然后在main.js文件中引入即可 import iView from 'iview' import 'iview/dist/styles/iview.css' Vue.use(iView) ¶三、引入路由 npm install vue-router@3.5.2 由于本次使用的是的Vue2.x，一定一定要指定vue-router@3.x版本，不然会报错！ 详情见：“export ‘default‘ (imported as ‘VueRouter‘) was not found in ‘vue-router‘报错分析 (yaotu.net) 新建文件夹Router，与Component文件夹同级，在其中新建index.js文件，引入路由并设置路由跳转 参考文档：(3条消息) vue路由router的基本使用及路由跳转的方式_ꪤ、匿名的博客-CSDN博客_router 跳转 在main.js中也引入一下路由 详情见：Vue报错：Unknown custom element: router-view - did you register the component correctly_Chanel-L的博客-CSDN博客 设置默认路由 参考文档：(3条消息) Vue默认路由_红丽*的博客-CSDN博客_vuerouter默认路由 文件命名报错：Component name “index“ should always be multi-word 新建.eslintrc.js文件，关闭组件命名规则 详情见：(3条消息) 【vue eslint】报错Component name “xxxxx“ should always be multi-word.eslintvue/四种解决方案_wally94的博客-CSDN博客 ¶四、功能实现 ¶1、打开本地文件&amp;读取信息 使用dialog.showOpenDialog()方法 参考文档： src/views/file.vue · bear/vue3+electron - 码云 - 开源中国 (gitee.com) (3条消息) electron实现打开本地文件接口（返回文件大小、文件名及文件后缀名和文件流等）_lbn2676043895的博客-CSDN博客 使用fs.stat()方法读取文件大小，单位为字节： Node.js fs.stat()实例讲解 - 码农教程 (manongjc.com) node获取单个指定文件得大小 - 升级打怪 - 博客园 (cnblogs.com) ¶2、实现右键菜单 v-contextmenu通过该包实现 vue-runtime-helpers同时也要装哦 安装参考文档：(4条消息) vue中，右键菜单组件v-contextmenu的使用_viceen的博客-CSDN博客_vue右键菜单组件 基础实现参考文档：【鼠标右击组件】v-contextmenu - WANGHUAN- - 博客园 (cnblogs.com) 具体案例参考文档:(4条消息) vue在el-table内结合v-contextmenu对行添加鼠标右键自定义菜单_Magic cape的博客-CSDN博客_v-contextmenu 🦋常用的鼠标点击方法： 属性名 功能 @click() / @dblclick() 单击事件 / 双击事件 @rightClick() 右击触发事件 @mousedown() / @mouseup() 按下触发 / 抬起触发事件 @mousemove() 当鼠标指针在指定的元素中移动时移动一个像素，就会发生一次 mousemove事件 @mouseleave() 当鼠标指针离开被选元素时，会发生 mouseleave 事件 @mouseout() 当鼠标指针从元素上移开时，发生 mouseout 事件 @mouseenter() 当鼠标指针进入被选元素时，会发生 mouseenter 事件 @mouseover() 当鼠标指针位于元素上方时，会发生 mouseover 事件 🍁注意： ①与 mouseleave 事件不同，不论鼠标指针离开被选元素还是任何子元素，都会触发 mouseout 事件。 ②mouseover 事件在鼠标指针进入被选元素或任意子元素时都会被触发，mouseenter 事件只有在鼠标指针进入被选元素时被触发。 ¶3、绑定属性 实现属性的动态切换，可绑定自定义的也可绑原生的 参考文档： (4条消息) Vue动态绑定属性—指令v-bind_落雪小轩韩的博客-CSDN博客_vue动态绑定属性值 (4条消息) Vue.js绑定属性v-bind_盛世如恋的博客-CSDN博客_vue绑定属性是变量 ¶4、js数组删除指定下标元素 项目中遇到的情况：需要删除数组对象中指定元素，使用this.files.splice(index,1)方法，注意，前面传入的是数组下标，返回值是被剔除的那个元素。参考文档：(4条消息) JS数组删除指定下标元素_大浩籽的博客-CSDN博客_js数组删除指定下标元素 ¶5、监听数据变化 但是尤其是对象，写在watch里要深度监听，挺耗费性能的，所以尽量不去用 基础用法：vue2.0中watch用法 - 走看看 (zoukankan.com) ¶6、操作节点 添加/创建元素(4条消息) 如何在DOM中添加元素_站在桥上烤冷面的博客-CSDN博客_添加dom元素 删除元素dom.remove() (4条消息) DOM节点的删除_leejj_520的博客-CSDN博客_dom移除节点 新增结点onclick属性报错（使用addEventListener和setAttribute都不行）使用了dom.onclick=()=&gt;{}才可以了哦 获取结点数量：怎么获取页面dom节点数量_51CTO博客_vue获取dom节点 获取所有元素：(4条消息) JavaScript选择器函数querySelector和querySelectorAll_弯弯的小溪的博客-CSDN博客_queryselector 常用方法：(4条消息) dom元素操作的常用方法（创建、添加、删除、修改属性）_veggie_a_h的博客-CSDN博客_dom 添加属性 注：create了span结点后， 使用结点.innerHTML的方法向里面塞值","categories":[{"name":"前端","slug":"前端","permalink":"https://umrabbit.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Electron","slug":"Electron","permalink":"https://umrabbit.github.io/tags/Electron/"},{"name":"Vue","slug":"Vue","permalink":"https://umrabbit.github.io/tags/Vue/"}]},{"title":"Github-Hexo-Nexmoe个人博客搭建记录","slug":"HexoRecord","date":"2022-11-18T14:20:34.000Z","updated":"2022-12-09T06:21:13.051Z","comments":true,"path":"2022/11/18/HexoRecord/","link":"","permalink":"https://umrabbit.github.io/2022/11/18/HexoRecord/","excerpt":"","text":"使用的主题为：nexmoe 搭建指南：快速开始 | Hexo Theme Nexmoe 记得在根目录的配置文件_config.yml中将theme设置为nexmoe ¶一、安装hexo-cil 一开始装了hexo，后来强制装了hexo-cli hexo与hexo-cil之间的关系： 参考文章：hexo和hexo-cli的关系？ - SegmentFault 思否 ¶二、配置 修改配置的时候，要在冒号后面加空格 参考文章：can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1: - 黑质白章 - 博客园 (cnblogs.com) ¶三、hexo常用命令 命令 含义 hexo clean 用于清理缓存文件，即清除旧的内容，较为常用 hexo generate hexo g，用于生成静态文件 hexo server hexo s，可以在本地端口4000测试 hexo deploy -m “这里是注释” hexo d，将更新的内容推到git仓库中 hexo new xxx 在_post文件夹下新建xxx.md文件，推送时会自动提交 ¶四、报错 报错①： Plugin load failed: hexo-generator-json-content Error: Cannot find module ‘D:\\Blog\\node_modules\\hexo-generator-json-content\\node_modules\\hexo-util\\lib\\index’. Please verify that the package.json has a valid “main” entry **解决方案：**去node_modules里删掉这个包，再hexo clean 报错②： unable to access ‘https://github.com:Umrabbit/Umrabbit.github.io/’: URL using bad/illegal format or missing URL FATAL Something’s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html 使用hexo d指令，报连不上仓库的错 **解决方案：**根目录_config.yml文件里 deploy中仓库地址一定得是ssh，不能用http 同时可以配置一下自己的coding仓库：Hexo d -g踩坑指北 - 简书 (jianshu.com) 报错③：推送的时候报Spawn failed的错误 解决方案：Hexo部署出现错误err: Error: Spawn failed解决方式 - 简书 (jianshu.com)","categories":[{"name":"前端","slug":"前端","permalink":"https://umrabbit.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://umrabbit.github.io/tags/Hexo/"}]},{"title":"UE中ReflectVector结点详解","slug":"ReflectVector","date":"2022-11-18T02:15:19.000Z","updated":"2022-11-18T05:43:33.338Z","comments":true,"path":"2022/11/18/ReflectVector/","link":"","permalink":"https://umrabbit.github.io/2022/11/18/ReflectVector/","excerpt":"","text":"¶一、结点含义 ReflectVector：输入入射向量和法线向量，通过该结点运算，可以输出反射方向向量。 ¶二、数学原理 在了解结点连接方式的背后，我们首先需要知道其数学原理 如图所示，已知入射向量V、法线n，求出射向量VR，其中，出射向量VR与入射向量V之间，大小相等，且与法线n之间的夹角均为θ 由于向量的平移不变性（向量平移后大小和方向都不变），我们可以将出射向量VR平移，如下图所示： 由于VR与V的大小相等，所以此时构成了一个等腰三角形 从V向n作垂线，长度为|VP|，其为V向n投影的长度：|VP|=|V|cosθ |VP|再乘以法线方向，就得到了V在n方向上的投影：VP=n|V|cosθ 又由于其是等腰三角形，V向其边作垂线，得到的是其边长的一半 那么如图所示，粉色向量可以由2VP来表示 那么反射向量VR可以用以下公式表示：VR=V-2VP ¶三、内部连线 双击打开结点，即可见其内部连线方式，ReflectVector结点内部连线如下： 运算过程如图所示： 注：由于UE中的法向量都是单位向量，所以其模长为1","categories":[{"name":"UE","slug":"UE","permalink":"https://umrabbit.github.io/categories/UE/"}],"tags":[{"name":"结点详解","slug":"结点详解","permalink":"https://umrabbit.github.io/tags/%E7%BB%93%E7%82%B9%E8%AF%A6%E8%A7%A3/"},{"name":"特效","slug":"特效","permalink":"https://umrabbit.github.io/tags/%E7%89%B9%E6%95%88/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-11-13T13:26:47.247Z","updated":"2022-11-13T13:26:47.247Z","comments":true,"path":"2022/11/13/hello-world/","link":"","permalink":"https://umrabbit.github.io/2022/11/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. ¶Quick Start ¶Create a new post $ hexo new &quot;My New Post&quot; More info: Writing ¶Run server $ hexo server More info: Server ¶Generate static files $ hexo generate More info: Generating ¶Deploy to remote sites $ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"人工智能","slug":"人工智能","permalink":"https://umrabbit.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"UE","slug":"UE","permalink":"https://umrabbit.github.io/categories/UE/"},{"name":"前端","slug":"前端","permalink":"https://umrabbit.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"人工智能","slug":"人工智能","permalink":"https://umrabbit.github.io/tags/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"},{"name":"text to image","slug":"text-to-image","permalink":"https://umrabbit.github.io/tags/text-to-image/"},{"name":"数学","slug":"数学","permalink":"https://umrabbit.github.io/tags/%E6%95%B0%E5%AD%A6/"},{"name":"结点详解","slug":"结点详解","permalink":"https://umrabbit.github.io/tags/%E7%BB%93%E7%82%B9%E8%AF%A6%E8%A7%A3/"},{"name":"Electron","slug":"Electron","permalink":"https://umrabbit.github.io/tags/Electron/"},{"name":"Vue","slug":"Vue","permalink":"https://umrabbit.github.io/tags/Vue/"},{"name":"Hexo","slug":"Hexo","permalink":"https://umrabbit.github.io/tags/Hexo/"},{"name":"特效","slug":"特效","permalink":"https://umrabbit.github.io/tags/%E7%89%B9%E6%95%88/"}]}