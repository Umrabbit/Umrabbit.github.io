{"meta":{"title":"草莓葱丁的小屋","subtitle":"个人博客","description":"","author":"Umrabbit","url":"https://umrabbit.github.io","root":"/"},"pages":[{"title":"关于本人","date":"2022-11-17T06:02:15.000Z","updated":"2022-11-17T06:30:57.770Z","comments":true,"path":"about.html","permalink":"https://umrabbit.github.io/about.html","excerpt":"","text":"这是一个测试这是一个测试这是一个测试这是一个测试 这是一个测试 这是一个测试 这是一个测试 测试 test hexo g hexo s hexo clean hexo d"},{"title":"文章归档","date":"2022-11-17T07:16:02.691Z","updated":"2022-11-17T07:16:02.691Z","comments":true,"path":"archive.html","permalink":"https://umrabbit.github.io/archive.html","excerpt":"","text":""},{"title":"links","date":"2022-11-17T07:18:39.000Z","updated":"2022-11-17T07:38:35.909Z","comments":true,"path":"PY.html","permalink":"https://umrabbit.github.io/PY.html","excerpt":"","text":""},{"title":"标签","date":"2022-11-16T13:28:19.000Z","updated":"2022-11-17T08:32:42.753Z","comments":true,"path":"tags.html","permalink":"https://umrabbit.github.io/tags.html","excerpt":"","text":""}],"posts":[{"title":"Electron+Vue+ElementUI+Iconify项目使用指南","slug":"electron-vue-document","date":"2022-11-24T01:26:13.000Z","updated":"2022-11-24T03:27:50.137Z","comments":true,"path":"2022/11/24/electron-vue-document/","link":"","permalink":"https://umrabbit.github.io/2022/11/24/electron-vue-document/","excerpt":"","text":"前言⚓该文档是写个小白师弟看的，放在博客里存个档~ 一、运行方法首先在VSCode中拉取最新项目（源代码管理&gt;拉取） 打开终端，使用npm install指令，安装项目所需要的依赖包 在终端中使用npm run electron:serve 指令，运行项目即可 二、目录结构及功能1、概述项目整体目录结构如下图所示： 主要文件功能说明如下： dist_electron：存放electron打包后的文件 public：存放公共资源 ⭐src：存放主要代码文件 .eslintrc.js：设置语法规则 package.json：规定项目需要的依赖包版本 2、重点目录说明上述目录中，src文件夹最为重要，主要界面都存放在其中，其结构如下图所示： 主要文件功能说明如下： ⭐components：存放构成该项目的各个页面组件 login：存放登录界面 router：存放路由相关文件，其中index.js设置了各界面之间的跳转路径 App.vue：整个项目的根界面，其他所有界面都是以组件的形式插入进去 background.js：控制electron的主进程，可以控制各窗口的状态 index.js：主界面的入口文件，涉及全局引入部件、注册挂载根节点等 login.js：登陆界面的入口文件 三、其他1、组件本项目中使用的组件库为ElementUI和iView，已在整体引用，在项目中直接使用即可 具体使用方法请参考其官方文档： Element - 网站快速成型工具 iView - A high quality UI Toolkit based on Vue.js (talkingdata.com) 2、图标本项目中使用的图标库为iconify 文件存放在src&gt;components&gt;Icons文件夹中，使用方法和组件一样","categories":[{"name":"前端","slug":"前端","permalink":"https://umrabbit.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Electron","slug":"Electron","permalink":"https://umrabbit.github.io/tags/Electron/"},{"name":"Vue","slug":"Vue","permalink":"https://umrabbit.github.io/tags/Vue/"}]},{"title":"构建Electron+Vue项目记录","slug":"ElectronVueRecord","date":"2022-11-19T07:47:18.000Z","updated":"2022-12-02T09:14:03.313Z","comments":true,"path":"2022/11/19/ElectronVueRecord/","link":"","permalink":"https://umrabbit.github.io/2022/11/19/ElectronVueRecord/","excerpt":"","text":"一、搭建项目1、使用vue-cli搭建项目npm uninstall vue-cli -g 先卸载已有的vue2.x脚手架，因为其无法使用vue create创建项目 npm install vue-cli -g 全局安装vue-cli5.x脚手架 2、使用vue create创建项目在控制台输入vue create + 你的项目名 vue create desktop_test 选择需要的vue版本(2&#x2F;3)即可 3、使用electron-builder安装Electronvue add electron-builder 选择安装版本后，继续安装就报错了 此时要将electron下载地址指向taobao镜像： npm config set electron_mirror &quot;https://npm.taobao.org/mirrors/electron/&quot; 再次安装 使用指令启动electron（如果此时报错找不到electron模块，npm install 一下即可） yarn run electron:serve 二、引入组件想要引入IView组件 首先使用指令安装ivew npm install iview --save 然后在main.js文件中引入即可 import iView from &#39;iview&#39; import &#39;iview/dist/styles/iview.css&#39; Vue.use(iView) 三、引入路由npm install vue-router@3.5.2 由于本次使用的是的Vue2.x，一定一定要指定&#118;&#x75;&#101;&#45;&#114;&#x6f;&#x75;&#116;&#101;&#x72;&#64;&#x33;&#x2e;&#x78;版本，不然会报错！ 详情见：“export ‘default‘ (imported as ‘VueRouter‘) was not found in ‘vue-router‘报错分析 (yaotu.net) 新建文件夹Router，与Component文件夹同级，在其中新建index.js文件，引入路由并设置路由跳转 参考文档：(3条消息) vue路由router的基本使用及路由跳转的方式_ꪤ、匿名的博客-CSDN博客_router 跳转 在main.js中也引入一下路由 详情见：Vue报错：Unknown custom element: router-view - did you register the component correctly_Chanel-L的博客-CSDN博客 设置默认路由 参考文档：(3条消息) Vue默认路由_红丽*的博客-CSDN博客_vuerouter默认路由 文件命名报错：Component name “index“ should always be multi-word 新建.eslintrc.js文件，关闭组件命名规则 详情见：(3条消息) 【vue eslint】报错Component name “xxxxx“ should always be multi-word.eslintvue&#x2F;四种解决方案_wally94的博客-CSDN博客 四、功能实现1、打开本地文件&amp;读取信息使用dialog.showOpenDialog()方法 参考文档： src&#x2F;views&#x2F;file.vue · bear&#x2F;vue3+electron - 码云 - 开源中国 (gitee.com) (3条消息) electron实现打开本地文件接口（返回文件大小、文件名及文件后缀名和文件流等）_lbn2676043895的博客-CSDN博客 使用fs.stat()方法读取文件大小，单位为字节： Node.js fs.stat()实例讲解 - 码农教程 (manongjc.com) node获取单个指定文件得大小 - 升级打怪 - 博客园 (cnblogs.com) 2、实现右键菜单v-contextmenu通过该包实现 vue-runtime-helpers同时也要装哦 安装参考文档：(4条消息) vue中，右键菜单组件v-contextmenu的使用_viceen的博客-CSDN博客_vue右键菜单组件 基础实现参考文档：【鼠标右击组件】v-contextmenu - WANGHUAN- - 博客园 (cnblogs.com) 具体案例参考文档:(4条消息) vue在el-table内结合v-contextmenu对行添加鼠标右键自定义菜单_Magic cape的博客-CSDN博客_v-contextmenu 🦋常用的鼠标点击方法： 属性名 功能 @click() &#x2F; @dblclick() 单击事件 &#x2F; 双击事件 @rightClick() 右击触发事件 @mousedown() &#x2F; @mouseup() 按下触发 &#x2F; 抬起触发事件 @mousemove() 当鼠标指针在指定的元素中移动时移动一个像素，就会发生一次 mousemove事件 @mouseleave() 当鼠标指针离开被选元素时，会发生 mouseleave 事件 @mouseout() 当鼠标指针从元素上移开时，发生 mouseout 事件 @mouseenter() 当鼠标指针进入被选元素时，会发生 mouseenter 事件 @mouseover() 当鼠标指针位于元素上方时，会发生 mouseover 事件 🍁注意： ①与 mouseleave 事件不同，不论鼠标指针离开被选元素还是任何子元素，都会触发 mouseout 事件。 ②mouseover 事件在鼠标指针进入被选元素或任意子元素时都会被触发，mouseenter 事件只有在鼠标指针进入被选元素时被触发。 3、绑定属性实现属性的动态切换，可绑定自定义的也可绑原生的 参考文档： (4条消息) Vue动态绑定属性—指令v-bind_落雪小轩韩的博客-CSDN博客_vue动态绑定属性值 (4条消息) Vue.js绑定属性v-bind_盛世如恋的博客-CSDN博客_vue绑定属性是变量 4、js数组删除指定下标元素项目中遇到的情况：需要删除数组对象中指定元素，使用this.files.splice(index,1)方法，注意，前面传入的是数组下标，返回值是被剔除的那个元素。参考文档：(4条消息) JS数组删除指定下标元素_大浩籽的博客-CSDN博客_js数组删除指定下标元素 5、监听数据变化但是尤其是对象，写在watch里要深度监听，挺耗费性能的，所以尽量不去用 基础用法：vue2.0中watch用法 - 走看看 (zoukankan.com)","categories":[{"name":"前端","slug":"前端","permalink":"https://umrabbit.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Electron","slug":"Electron","permalink":"https://umrabbit.github.io/tags/Electron/"},{"name":"Vue","slug":"Vue","permalink":"https://umrabbit.github.io/tags/Vue/"}]},{"title":"Github-Hexo-Nexmoe个人博客搭建记录","slug":"HexoRecord","date":"2022-11-18T14:20:34.000Z","updated":"2022-11-19T03:07:03.615Z","comments":true,"path":"2022/11/18/HexoRecord/","link":"","permalink":"https://umrabbit.github.io/2022/11/18/HexoRecord/","excerpt":"","text":"使用的主题为：nexmoe 搭建指南：快速开始 | Hexo Theme Nexmoe 记得在根目录的配置文件_config.yml中将theme设置为nexmoe 一、安装hexo-cil一开始装了hexo，后来强制装了hexo-cli hexo与hexo-cil之间的关系： 参考文章：hexo和hexo-cli的关系？ - SegmentFault 思否 二、配置修改配置的时候，要在冒号后面加空格 参考文章：can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1: - 黑质白章 - 博客园 (cnblogs.com) 三、hexo常用命令 命令 含义 hexo clean 用于清理缓存文件，即清除旧的内容，较为常用 hexo generate hexo g，用于生成静态文件 hexo server hexo s，可以在本地端口4000测试 hexo deploy -m “这里是注释” hexo d，将更新的内容推到git仓库中 hexo new xxx 在_post文件夹下新建xxx.md文件，推送时会自动提交 四、报错报错①： Plugin load failed: hexo-generator-json-contentError: Cannot find module ‘D:\\Blog\\node_modules\\hexo-generator-json-content\\node_modules\\hexo-util\\lib\\index’. Please verify that the package.json has a valid “main” entry 解决方案：去node_modules里删掉这个包，再hexo clean 报错②： unable to access ‘https://github.com:Umrabbit/Umrabbit.github.io/&#39;: URL using bad&#x2F;illegal format or missing URLFATAL Something’s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html 使用hexo d指令，报连不上仓库的错 解决方案：根目录_config.yml文件里 deploy中仓库地址一定得是ssh，不能用http 同时可以配置一下自己的coding仓库：Hexo d -g踩坑指北 - 简书 (jianshu.com) 报错③：推送的时候报Spawn failed的错误 解决方案：Hexo部署出现错误err: Error: Spawn failed解决方式 - 简书 (jianshu.com)","categories":[{"name":"前端","slug":"前端","permalink":"https://umrabbit.github.io/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://umrabbit.github.io/tags/Hexo/"}]},{"title":"UE中ReflectVector结点详解","slug":"ReflectVector","date":"2022-11-18T02:15:19.000Z","updated":"2022-11-18T05:43:33.338Z","comments":true,"path":"2022/11/18/ReflectVector/","link":"","permalink":"https://umrabbit.github.io/2022/11/18/ReflectVector/","excerpt":"","text":"一、结点含义ReflectVector：输入入射向量和法线向量，通过该结点运算，可以输出反射方向向量。 二、数学原理在了解结点连接方式的背后，我们首先需要知道其数学原理 如图所示，已知入射向量V、法线n，求出射向量VR，其中，出射向量VR与入射向量V之间，大小相等，且与法线n之间的夹角均为θ 由于向量的平移不变性（向量平移后大小和方向都不变），我们可以将出射向量VR平移，如下图所示： 由于VR与V的大小相等，所以此时构成了一个等腰三角形 从V向n作垂线，长度为|VP|，其为V向n投影的长度：|VP|&#x3D;|V|cosθ |VP|再乘以法线方向，就得到了V在n方向上的投影：VP&#x3D;n|V|cosθ 又由于其是等腰三角形，V向其边作垂线，得到的是其边长的一半 那么如图所示，粉色向量可以由2VP来表示 那么反射向量VR可以用以下公式表示：VR&#x3D;V-2VP 三、内部连线双击打开结点，即可见其内部连线方式，ReflectVector结点内部连线如下： 运算过程如图所示： 注：由于UE中的法向量都是单位向量，所以其模长为1","categories":[{"name":"UE","slug":"UE","permalink":"https://umrabbit.github.io/categories/UE/"}],"tags":[{"name":"特效","slug":"特效","permalink":"https://umrabbit.github.io/tags/%E7%89%B9%E6%95%88/"},{"name":"结点详解","slug":"结点详解","permalink":"https://umrabbit.github.io/tags/%E7%BB%93%E7%82%B9%E8%AF%A6%E8%A7%A3/"}]},{"title":"测试文档1","slug":"测试文档1","date":"2022-11-17T07:02:44.000Z","updated":"2022-11-17T07:10:41.752Z","comments":true,"path":"2022/11/17/测试文档1/","link":"","permalink":"https://umrabbit.github.io/2022/11/17/%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A31/","excerpt":"","text":"这是一篇测试文档哦测试内容测试分类与tags是否能正确显示","categories":[{"name":"测试","slug":"测试","permalink":"https://umrabbit.github.io/categories/%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"Test","slug":"Test","permalink":"https://umrabbit.github.io/tags/Test/"},{"name":"Markdown","slug":"Markdown","permalink":"https://umrabbit.github.io/tags/Markdown/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-11-13T13:26:47.247Z","updated":"2022-11-13T13:26:47.247Z","comments":true,"path":"2022/11/13/hello-world/","link":"","permalink":"https://umrabbit.github.io/2022/11/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new &quot;My New Post&quot; More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"前端","slug":"前端","permalink":"https://umrabbit.github.io/categories/%E5%89%8D%E7%AB%AF/"},{"name":"UE","slug":"UE","permalink":"https://umrabbit.github.io/categories/UE/"},{"name":"测试","slug":"测试","permalink":"https://umrabbit.github.io/categories/%E6%B5%8B%E8%AF%95/"}],"tags":[{"name":"Electron","slug":"Electron","permalink":"https://umrabbit.github.io/tags/Electron/"},{"name":"Vue","slug":"Vue","permalink":"https://umrabbit.github.io/tags/Vue/"},{"name":"Hexo","slug":"Hexo","permalink":"https://umrabbit.github.io/tags/Hexo/"},{"name":"特效","slug":"特效","permalink":"https://umrabbit.github.io/tags/%E7%89%B9%E6%95%88/"},{"name":"结点详解","slug":"结点详解","permalink":"https://umrabbit.github.io/tags/%E7%BB%93%E7%82%B9%E8%AF%A6%E8%A7%A3/"},{"name":"Test","slug":"Test","permalink":"https://umrabbit.github.io/tags/Test/"},{"name":"Markdown","slug":"Markdown","permalink":"https://umrabbit.github.io/tags/Markdown/"}]}